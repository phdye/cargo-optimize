name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt -- --check
      continue-on-error: ${{ matrix.rust != 'stable' }}
    
    - name: Run clippy
      run: cargo clippy -- -D warnings
      continue-on-error: ${{ matrix.rust != 'stable' }}
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run parallel-safe tests
      run: |
        cargo test --lib
        cargo test --bins
        cargo test --test basic_functionality_test
        cargo test --test comprehensive_test_runner
        cargo test --test config_integration
        cargo test --test config_safety_comprehensive
        cargo test --test hardware_detection
        cargo test --test linker_config_integration_test
        cargo test --test mvp_test
        cargo test --test production_readiness_tests
        cargo test --test project_analysis
        cargo test --test quality_assurance_tests
        cargo test --test security_resilience_tests
    
    - name: Run config_management tests (single-threaded)
      # These tests modify global state and must run single-threaded
      run: cargo test --test config_management -- --test-threads=1
    
    - name: Run phase_1_1_validation tests (single-threaded)
      # These tests also modify global state and must run single-threaded
      run: cargo test --test phase_1_1_validation -- --test-threads=1
    
    - name: Run doctests
      run: cargo test --doc
    
    - name: Test with all features
      run: cargo test --all-features

  # Additional job for testing minimum supported Rust version
  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust 1.70
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: 1.70.0
        override: true
    - name: Check MSRV
      run: cargo check --verbose
