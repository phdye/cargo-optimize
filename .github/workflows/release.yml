name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate changelog
      run: |
        echo "# Release v${{ steps.get_version.outputs.version }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## What's Changed" >> RELEASE_NOTES.md
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD >> RELEASE_NOTES.md
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: Release v${{ steps.get_version.outputs.version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false

  build-release:
    name: Build Release Assets
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: cargo-optimize-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: cargo-optimize-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: cargo-optimize-macos-amd64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: target/${{ matrix.target }}/release/cargo-optimize${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        asset_name: ${{ matrix.artifact_name }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Login to crates.io
      run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
    
    - name: Publish crate
      run: cargo publish --no-verify
